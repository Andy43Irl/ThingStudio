{
    "widget": {
        "title": "Sparkline",
        "tagName": "ts-sparkline",
        "parameters": [
            {
                "title": "values",
                "paramType": "[Numbers]",
                "required": true,
                "description": "Values to be displayed",
                "dummyValue": "{{journal \"myFeed\"}}"
            },
            {
                "title": "legend",
                "paramType": "String",
                "required": false,
                "description": "Label for values",
                "dummyValue": "Dilithium Temp"
            },
            {
                "title": "maxvalue",
                "paramType": "Number",
                "required": false,
                "description": "Maximum value to be display",
                "dummyValue": "100"
            }
        ],
        "widgetType": "Web Component"
    },
    "template": {
        "title": "TimeSeries",
        "isWidget": true,
        "html": "<svg id=\"doc1\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\"  viewBox=\"-10, 0, 500, 250\">\n  <g id=\"Layer_1\">\n\n\n    {{#with  json_parse values}}\n           <polyline fill=\"none\" stroke=\"orange\" stroke-linejoin=\"round\" stroke-width=\"2\"  \n           points =\"\n        {{#each indexedArray this}}\n            {{step index length}},{{revvalue}}\n        \n        {{/each}}\n        \"  />\n        {{#each indexedArray this}}\n           {{#if minval}}\n           <circle cx=\"{{step index length}}\" cy=\"{{revvalue}}\" r=\"5\" stroke=\"black\" stroke-width=\"1\" fill=\"red\" />\n           {{/if}}\n         {{#if maxval}}\n           <circle cx=\"{{step index length}}\" cy=\"{{revvalue}}\" r=\"5\" stroke=\"black\" stroke-width=\"1\" fill=\"green\" />\n           {{/if}}\n        {{/each}}\n         <text text-anchor=\"middle\"\n          x=\"250\" y=\"50\" style=\"font-size: 20px;\" stroke=\"orange\"  fill=\"ORANGE\">{{currentval}}</text>\n  <text text-anchor=\"left\"\n          x=\"20\" y=\"50\" style=\"font-size: 20px;\" stroke=\"orange\"  fill=\"orange\">{{legend}}</text>\n    {{/with}}\n    \n  </g>\n</svg>",
        "js": "Template[name].onCreated(function(tg){\n     this.state = new ReactiveDict();\n     this.data.legend = this.data.legend || \"\\\"Reactor Level\\\"\";\n     this.data.values = this.data.values || \"[23,25,23,22,21,30,35,22,32,37,38,39,23,10,11,33,34]\"\n});\n\n\n\nTemplate[name].onRendered(function(){\n     mv = this.data.maxvalue ? this.data.maxvalue : 100;\n     this.state.set(\"maxvalue\", mv)\n         console.log(\"CRE\", this, mv, this.data);\n})\n\nTemplate[name].helpers({\n    json_parse: function(str){\n        try {\n            if(str) {\n                vals =  JSON.parse(str) \n            } else {\n                vals = [];\n            }\n        }\n        catch(ev){\n            console.log(\"JPFAIL: \",  ev)\n        }\n        //Save current value unmapped.\n        Template.instance().state.set(\"currentValue\", vals[vals.length-1])\n        mv =  Template.instance().state.get(\"maxvalue\");\n        ra =  vals.map(function(v){\n            \n            return   mapValue(v, 0, mv, 0, 250);\n        })\n        return ra;\n    },\n    legend: function(){\n        return Template.instance().data.legend;\n    },\n    debug: function(v){\n      console.log(\"DEBUG: \",v)  ;\n    },\n    previndex: function(){\n \n      return this.index-1;\n    },\n    prevvalue: function(){\n        pd  = Template.parentData();\n\n        return pd[this.index-1];\n    },\n    revvalue: function(){\n      return 250-this.value;  \n    },\n    step: function(num, length){\n\n        return num * 500/length;\n    },\n    minval: function(){\n        pd  = Template.parentData();\n        //console.log(this.value, (pd))\n        return this.value ==  Math.min.apply(null, pd);\n    },\n    maxval: function(){\n        pd  = Template.parentData();\n        //console.log(this.value, (pd))\n        return this.value ==  Math.max.apply(null, pd);\n    },\n    currentval: function(){\n                // console.log(\"CV :\", this)\n        v = this[this.length-1];\n\n        return  Template.instance().state.get(\"currentValue\");\n    }\n});",
        "widgetName": "ts-sparkline"
    }
}