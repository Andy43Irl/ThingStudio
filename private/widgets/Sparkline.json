{
    "widget": {
        "title": "Sparkline",
        "tagName": "ts-sparkline",
        "parameters": [
            {
                "title": "values",
                "paramType": "[Numbers]",
                "required": true,
                "description": "Values to be displayed",
                "dummyValue": "{{journal \"myFeed\"}}"
            },
            {
                "title": "legend",
                "paramType": "String",
                "required": false,
                "description": "Label for values",
                "dummyValue": "Dilithium Temp"
            },
            {
                "title": "maxvalue",
                "paramType": "Number",
                "required": false,
                "description": "Maximum value to be display",
                "dummyValue": "100"
            }
        ],
        "widgetType": "Web Component"
    },
    "template": {
        "title": "TimeSeries",
        "html": "<svg id=\"doc1\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\"  viewBox=\"-20, 0, 520, 250\">\n  <g id=\"Layer_1\">\n\n\n    {{#with  json_parse values}}\n        <polyline fill=\"none\" stroke=\"#F69900\" stroke-linejoin=\"round\" stroke-width=\"2\" points =\"\n        {{#each indexedArray this}}\n            {{step index length}},{{revvalue}}\n        {{/each}}\n        \"  />\n        {{#each indexedArray this}}\n            {{#if minval}}\n                <circle cx=\"{{step index length}}\" cy=\"{{revvalue}}\" r=\"10\" stroke=\"#BE261F\" stroke-width=\"3\" fill=\"transparent\" />\n            {{/if}}\n            {{#if maxval}}\n                <circle cx=\"{{step index length}}\" cy=\"{{revvalue}}\" r=\"10\" stroke=\"#2A8A43\" stroke-width=\"3\" fill=\"transparent\" />\n            {{/if}}\n            {{#if currVal}}\n                <circle cx=\"{{step index length}}\" cy=\"{{revvalue}}\" r=\"10\" stroke=\"#4F8ADD\" stroke-width=\"3\" fill=\"transparent\" />\n            {{/if}}\n        {{/each}}\n\n        <circle cx=\"0\" cy=\"236\" r=\"6\" stroke=\"#BE261F\" stroke-width=\"3\" fill=\"transparent\" />\n        <circle cx=\"110\" cy=\"236\" r=\"6\" stroke=\"#2A8A43\" stroke-width=\"3\" fill=\"transparent\" />\n        <circle cx=\"220\" cy=\"236\" r=\"6\" stroke=\"#4F8ADD\" stroke-width=\"3\" fill=\"transparent\" />\n        <text text-anchor=\"left\" x=\"-10\" y=\"20\" style=\"font-size: 20px; font-family:'Burlingame W01 Semi Bold';\" stroke=\"#F69900\" fill=\"#F69900\">{{legend}}</text>\n        <text text-anchor=\"left\" x=\"14\" y=\"243\" style='font-size: 20px; font-family: \"Burlingame W01 Light\";' stroke=\"#BE261F\" fill=\"#BE261F\">{{min}}</text>\n        <text text-anchor=\"left\" x=\"124\" y=\"243\" style='font-size: 20px; font-family: \"Burlingame W01 Light\";' stroke=\"#2A8A43\" fill=\"#2A8A43\">{{max}}</text>\n        <text text-anchor=\"left\" x=\"234\" y=\"243\" style='font-size: 20px; font-family: \"Burlingame W01 Light\";' stroke=\"#4F8ADD\" fill=\"#4F8ADD\">{{currentval}}</text>\n        <text text-anchor=\"left\" x=\"324\" y=\"243\" style='font-size: 20px; font-family: \"Burlingame W01 Light\";' stroke=\"#F69900\" fill=\"#F69900\">Range: {{autoscaling}}</text>\n        \n          \n    {{/with}}\n    \n  </g>\n</svg>",
        "js": "Template[name].onCreated(function(tg){\n     this.state = new ReactiveDict();\n     this.data.legend = this.data.legend || \"\\\"Reactor Level\\\"\";\n     this.data.values = this.data.values || \"23,25,23,22,21,30,35,22,32,37,38,39,23,10,11,33,34\"\n});\n\n\n\nTemplate[name].onRendered(function(){\n     mv = this.data.maxvalue ? this.data.maxvalue : null;\n     this.state.set(\"maxvalue\", mv)\n     this.state.set(\"minvalue\", this.data.minvalue)\n         //console.log(\"CRE\", this, mv, this.data);\n})\n\nTemplate[name].helpers({\n    json_parse: function(str){\n        if(!str) {\n            return;\n        }\n        var vals = str.split(',');\n        //Save current value unmapped.\n        Template.instance().state.set(\"currentValue\", vals[vals.length-1])\n        mv = Template.instance().state.get(\"maxvalue\");\n        minv = Template.instance().state.get(\"minvalue\");\n        console.log(\"MV: \", mv, minv)\n        // Autoscale if no max set.\n        if(!mv) {\n            pd  = vals.map(function(v){\n                return parseFloat(v) || 0;\n            });\n            mv = Math.max(...pd);\n            minv = Math.min(...pd);\n            Template.instance().state.set(\"max\", mv);\n            Template.instance().state.set(\"min\", minv);\n            diff = mv - minv;\n            mv += diff/3;\n            minv -= diff/3;\n            console.log(\"Autoscaling \", pd, mv, minv)\n        }\n        ra =  vals.map(function(v){\n            \n            return   mapValue(v, minv, mv, 0, 250);\n        })\n        return ra;\n    },\n    legend: function(){\n        return Template.instance().data.legend;\n    },\n    debug: function(v){\n      console.log(\"DEBUG: \",v)  ;\n    },\n    previndex: function(){\n \n      return this.index-1;\n    },\n    prevvalue: function(){\n        pd  = Template.parentData();\n\n        return pd[this.index-1];\n    },\n    revvalue: function(){\n      return 250-this.value;  \n    },\n    step: function(num, length){\n\n        return num * 500/length;\n    },\n    minval: function(){\n        pd  = Template.parentData();\n        //console.log(this.value, (pd))\n        return this.value ==  Math.min.apply(null, pd);\n    },\n    maxval: function(){\n        pd  = Template.parentData();\n        //console.log(this.value, (pd))\n        return this.value ==  Math.max.apply(null, pd);\n    },\n    currVal: function() {\n        pd  = Template.parentData();\n        return   this.index ==  pd.length-1;\n    },\n    max: function() {\n       return  Template.instance().state.get(\"max\");\n    },\n    min: function() {\n        return  Template.instance().state.get(\"min\");\n    },\n    currentval: function(){\n                // console.log(\"CV :\", this)\n        v = this[this.length-1];\n\n        return  Template.instance().state.get(\"currentValue\");\n    },\n    autoscaling: function(){\n       var range = Template.instance().state.get(\"max\")-Template.instance().state.get(\"min\");\n        return Template.instance().state.get(\"maxvalue\") ? \"fixed scale\" : range.toFixed(2);\n    }\n    \n});",
        "isWidget": true,
        "widgetName": "ts-sparkline",
        "lowercaseTitle": "timeseries"
    }
}