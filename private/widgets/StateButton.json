{
    "widget": {
        "title": "StateButton",
        "tagName": "ts-statebutton",
        "widgetType": "Library Template",
        "parameters": [
            {
                "title": "pubfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to publish to",
                "dummyValue": "StatePub"
            },
            {
                "title": "subfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to subscribe to.",
                "dummyValue": "StateSub"
            },
            {
                "title": "legend",
                "paramType": "String",
                "required": false,
                "description": "Label for button",
                "dummyValue": "Hall Light"
            }
        ],
        "instructions": "IMPORTANT: Work in progress! . Contact Mike.\n\nStateButton is both a command and a display widget.\nIt's designed for use where you have, say, a remote light, which may be switched on or off by more than one user.\nWhen first rendered, it enters 'unknown\" state and sends out a \"reqStatus\" message on it's publish feed. The remote device should reply with a current status - \"on\" or \"off\".\nWhen clicked, StateButton sends a toggleState message and enters \"waiting\" state, until the remote device has send a new status message.\n\nBackground color reflects state: \n-unknown - grey\n-on - green\n-off - red\n-waiting - white"
    },
    "template": {
        "title": "StateButton",
        "html": "<button  class=\"btn  {{statebuttonColor}}\">{{legend}}</button>",
        "js": "Template[name].onCreated(function() {\n    //This tracks the state of the widget\n    console.log(\"OC:\", this)\n    this.state = new ReactiveVar(\"unknown\");\n});\n\nTemplate[name].onRendered(function(){\n    //This requests an initial state from the device\n    console.log(\"TI \", this)\n    publishFeed(this.data.pubfeed, \"reqStatus\");\n    state = Template.instance().state\n    subfeed = this.data.subfeed;\n    //This hooks the state of the widget to the subscribe feed\n    Tracker.autorun(function() {\n        msg = getFeed(subfeed,  \"unknown\");\n        console.log(\"SSS \", msg, state)\n        state.set(msg);\n    });\n});\n\n\n\nTemplate[name].helpers({\n    statebuttonColor: function() {\n        //Translate the widget state to a css class.\n        console.log(\"SBC: \", Template.instance().state.get())\n        switch(Template.instance().state.get()){\n            case \"unknown\": return \"grey\";\n            case \"on\": return \"green\";\n            case \"off\": return \"red\";\n            case \"waiting\": return \"grey lighten-2\";\n        } \n    },\n        legend: function(){\n        l =  Template.instance().data.legend;\n        return l || \"Kitchen Light\"\n    },\n});\n\nTemplate[name].events({\n    'click button': function(ev){\n        console.log(\"ButtonClicked\", this);\n        publishFeed(Template.instance().data.pubfeed, \"toogleState\");\n        Template.instance().state.set(\"waiting\")\n        return false;\n    },\n});",
        "isWidget": true
    }
}