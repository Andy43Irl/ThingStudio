{
    "widget": {
        "title": "StateButton",
        "tagName": "ts-statebutton",
        "instructions": "IMPORTANT: WORK  IN PROGRESS! . Contact Mike.\n\nStateButton is both a command and a display widget.\nIt's designed for use where you have, say, a remote light, which may be switched on or off by more than one user.\n\nWhen first rendered, it enters 'unknown\" state and sends out a \"reqStatus\" message on it's publish feed. The remote device should reply with a current status - \"on\" or \"off\".\n\nWhen clicked, StateButton sends a toggleState message and enters \"waiting\" state, until the remote device has send a new status message.\n\nBackground color reflects state: \n* unknown - grey\n* on - green\n* off - red\n* waiting - white",
        "parameters": [
            {
                "title": "pubfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to publish to",
                "dummyValue": "dummyfeed"
            },
            {
                "title": "subfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to subscribe to.",
                "dummyValue": "dummyfeed"
            },
            {
                "title": "legend",
                "paramType": "String",
                "required": false,
                "description": "Label for button",
                "dummyValue": "Hall Light"
            }
        ],
        "widgetType": "Library Template"
    },
    "template": {
        "title": "StateButton",
        "html": "<button  class=\"btn\" style=\"background-color: {{statebuttonColor}}\"  >{{legend}}</button>",
        "js": "Template[name].onCreated(function() {\n    //This tracks the state of the widget\n    this.stateVar = new ReactiveVar(\"unknown\");\n});\n\nTemplate[name].onRendered(function(){\n    //This requests an initial state from the device\n    var instance = this;\n    instance.data.pubfeed = instance.data.pubfeed || \"dummyfeed\";\n     //This hooks the state of the widget to the subscribe feed\n    instance.autorun(function(c) {\n        sf = instance.data.subfeed\n        msg = getFeed(sf,  \"unknown\");\n        console.log(\"Autorun \", sf, msg,  c, instance);\n        instance.stateVar.set(msg ? msg : \"unknown\");\n    });\n    //Send initial request for status\n    publishFeed(this.data.pubfeed.title, \"reqStatus\");\n});\n\n\n\nTemplate[name].helpers({\n    statebuttonColor: function() {\n        //Translate the widget state to a css class.\n        stateVar = Template.instance().stateVar;\n        subfeed = Template.instance().data.subfeed;\n        var status = stateVar.get();\n        switch(status){\n            case \"unknown\": return \"grey\";\n            case \"on\": return \"green\";\n            case \"off\": return \"red\";\n            case \"waiting\": return \"grey lighten-2\";\n        } \n    },\n    legend: function(){\n        l =  Template.instance().data.legend;\n        return l || \"Kitchen Light\"\n    },\n});\n\nTemplate[name].events({\n    'click button': function(ev, instance){\n        publishFeed(instance.data.pubfeed.title, \"toggleState\");\n        instance.stateVar.set(\"waiting\")\n        return false;\n    },\n});",
        "isWidget": true
    }
}