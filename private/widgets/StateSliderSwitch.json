{
    "widget": {
        "title": "StateSliderSwitch",
        "widgetType": "Library Template",
        "parameters": [
            {
                "title": "pubfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to publish on",
                "dummyValue": "dummyfeed"
            },
            {
                "title": "subfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to subscribe on",
                "dummyValue": "dummyfeed"
            },
            {
                "title": "legend",
                "paramType": "String",
                "required": true,
                "description": "Title to display on widget",
                "dummyValue": "Title"
            }
        ],
        "instructions": "StateSliderSwitch is both a command and a display widget. It's designed for use where you have, say, a remote light, which may be switched on or off by more than one user.\n\nWhen first rendered, it enters 'unknown\" state and sends out a \"reqStatus\" message on it's publish feed. The remote device should reply with a current status - \"on\" or \"off\".\n\nWhen clicked, StateButton sends a toggleState message and enters \"waiting\" state, until the remote device has sent a new status message."
    },
    "template": {
        "title": "StateSliderSwitch",
        "summary": "SVG drawing of slider switch",
        "lowercaseTitle": "statesliderswitch",
        "html": "<style>\n    .rotary-container.unknown-on #circle {\n    \tanimation: unknown-on 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.unknown-off #circle {\n    \tanimation: unknown-off 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.on-off #circle {\n    \tanimation: on-off 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.off-on #circle {\n    \tanimation: off-on 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.on-waiting #circle {\n    \tanimation: on-waiting 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.off-waiting #circle {\n    \tanimation: off-waiting 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.waiting-off #circle {\n    \tanimation: waiting-off 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.waiting-on #circle {\n    \tanimation: waiting-on 500ms cubic-bezier(.55,0,.1,1) backwards;\n    }\n    .rotary-container.unknown-unknown #circle {\n    \t opacity: 0.3; \n    }\n    \n\n\n    @keyframes unknown-on {\n    \t0%   { transform: translateX(0%); }\n    \t100% { transform: translateX(50%); }\n    }\n    @keyframes unknown-off {\n    \t0%   { transform: translateX(0%); }\n    \t100% { transform: translateX(-50%); }\n    }\n    @keyframes on-off {\n    \t0%   { transform: translateX(50%); opacity: 1.0;}\n    \t100% { transform: translateX(-50%); opacity: 1.0;}\n    }\n    @keyframes off-on {\n    \t0%   { transform: translateX(-50%); }\n    \t100% { transform: translateX(50%); }\n    }\n    @keyframes on-waiting {\n    \t0%   { transform: translateX(50%); }\n    \t100% { transform: translateX(0%); }\n    }\n    @keyframes off-waiting {\n    \t0%   { transform: translateX(-50%); }\n    \t100% { transform: translateX(0%); }\n    }\n    @keyframes waiting-off {\n    \t0%   { transform: translateX(0%); }\n    \t100% { transform: translateX(-50%); }\n    }\n    @keyframes waiting-on {\n    \t0%   { transform: translateX(0%); }\n    \t100% { transform: translateX(50%); }\n    }\n</style>\n\n<svg class=\"rotary-container {{deviceState}}\" width=\"140px\" height=\"90px\" viewBox=\"0 0 140 90\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <defs></defs>\n    <g id=\"slider-switch\">\n        <rect id=\"bg\" fill=\"#D1D4D8\" x=\"0\" y=\"0\" width=\"140\" height=\"90\"></rect>\n        <rect id=\"house\" fill=\"#E9F1F4\" x=\"20\" y=\"21\" width=\"100\" height=\"40\" rx=\"20\"></rect>\n        <circle id=\"circle\" fill=\"#36ADD1\" cx=\"70\" cy=\"41\" r=\"30\"></circle>\n        <text id=\"ROTARY\" font-family=\"Gotham\" font-size=\"10\" font-weight=\"260\" text-anchor=\"start\" fill=\"#727272\">\n            <tspan x=\"6.6\" y=\"84\">{{legend}}</tspan>\n        </text>\n        <text id=\"ON\" font-family=\"Gotham\" font-size=\"10\" font-weight=\"260\" text-anchor=\"end\" fill=\"#727272\">\n            <tspan x=\"133\" y=\"84\">{{curVal}}</tspan>\n        </text>\n    </g>\n</svg>",
        "js": "Template[name].onCreated(function() {\n    //This tracks the state of the widget\n    this.previousStateVar = new ReactiveVar(\"unknown\")\n    this.currentStateVar = new ReactiveVar(\"unknown\");\n});\n\nTemplate[name].onRendered(function(){\n    //This requests an initial state from the device\n    var instance = this;\n    instance.data.pubfeed = instance.data.pubfeed || \"dummyfeed\";\n     //This hooks the state of the widget to the subscribe feed\n    instance.autorun(function(c) {\n        sf = instance.data.subfeed || \"StateSub\"\n        msg = getFeed(sf,  \"unknown\");\n        Tracker.nonreactive(function(){\n            instance.previousStateVar.set( instance.currentStateVar.get() );\n            instance.currentStateVar.set( msg );\n        })\n    });\n    //Send initial request for status\n    publishFeed(this.data.pubfeed, \"reqStatus\");\n});\n\nTemplate[name].helpers({\n    deviceState: function() {\n        // Returns the CSS class based on the state\n        previousStateVar = Template.instance().previousStateVar;\n        currentStateVar = Template.instance().currentStateVar;\n        var current = currentStateVar.get();\n        var old = previousStateVar.get();\n        return old+\"-\"+current\n    },\n    fromX: function() {\n        previousStateVar = Template.instance().previousStateVar;\n        currentStateVar = Template.instance().currentStateVar;\n        var previousStatus = previousStateVar.get();\n        var currentStatus = currentStateVar.get();\n        return Template.instance().stateTable[previousStatus][currentStatus][0].toString()\n    },\n    toX: function() {\n        prevousStateVar = Template.instance().previousStateVar;\n        currentStateVar = Template.instance().currentStateVar;\n        var previousStatus = previousStateVar.get();\n        var currentStatus = currentStateVar.get();\n        return Template.instance().stateTable[previousStatus][currentStatus][1].toString();\n    },\n    legend: function(){\n        legend =  Template.instance().data.legend;\n        return legend || \"TITLE\"\n    },\n    curVal: function() {\n        return currentStateVar.get().toUpperCase();\n    }\n});\n\nTemplate[name].events({\n    'click svg': function(ev, instance){\n        publishFeed(instance.data.pubfeed, \"toggleState\");\n        instance.previousStateVar.set(instance.currentStateVar.get())\n        instance.currentStateVar.set(\"waiting\")\n        return false;\n    },\n});",
        "isWidget": true
    }
}