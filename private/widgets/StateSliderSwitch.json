{
    "widget": {
        "title": "StateSliderSwitch",
        "widgetType": "Library Template",
        "parameters": [
            {
                "title": "pubfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to publish on",
                "dummyValue": "dummyfeed"
            },
            {
                "title": "subfeed",
                "paramType": "Feed",
                "required": true,
                "description": "Feed to subscribe on",
                "dummyValue": "dummyfeed"
            },
            {
                "title": "legend",
                "paramType": "String",
                "required": true,
                "description": "Title to display on widget",
                "dummyValue": "Title"
            },
            {
                "title": "unknownColor",
                "paramType": "String",
                "required": false,
                "description": "The color for the unknown state",
                "dummyValue": "gray"
            },
            {
                "title": "onColor",
                "paramType": "String",
                "required": false,
                "description": "The color for the on state",
                "dummyValue": "#5fcf80"
            },
            {
                "title": "offColor",
                "paramType": "String",
                "required": false,
                "description": "The color for the off state",
                "dummyValue": "#A6ABB2"
            }
        ],
        "instructions": "StateSliderSwitch is both a command and a display widget. It's designed for use where you have, say, a remote light, which may be switched on or off by more than one user.\n\nWhen first rendered, it enters 'unknown\" state and sends out a \"reqStatus\" message on it's publish feed. The remote device should reply with a current status - \"on\" or \"off\".\n\nWhen clicked, StateButton sends a toggleState message and enters \"waiting\" state, until the remote device has sent a new status message."
    },
    "template": {
        "title": "StateSliderSwitch",
        "summary": "SVG drawing of slider switch",
        "lowercaseTitle": "statesliderswitch",
        "html": "<style>\n    .rotary-container.unknown-unknown #circle-interstitial {\n        fill: gray;\n    }\n    .rotary-container.unknown-on .movable {\n    \tanimation: unknown-on 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.unknown-off .movable {\n    \tanimation: unknown-off 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.on-off .movable {\n    \tanimation: on-off 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.off-on .movable {\n    \tanimation: off-on 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.on-waiting .movable {\n    \tanimation: on-waiting 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.off-waiting .movable {\n    \tanimation: off-waiting 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.waiting-off .movable {\n    \tanimation: waiting-off 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container.waiting-on .movable {\n    \tanimation: waiting-on 500ms cubic-bezier(.55,0,.1,1) forwards;\n    }\n    .rotary-container #interstitial {\n    \t animation: rotate-interstitial 5000ms linear infinite;\n    \t transform-origin: 50% 50%;\n    }\n    .rotary-container.on-waiting #circle,\n    .rotary-container.off-waiting #circle,\n    .rotary-container.unknown-unknown #circle {\n        opacity: 0;\n    }\n    \n    @keyframes rotate-interstitial {\n        0%   { transform: rotateZ(0deg); translate3d(0,11px,0);   }\n        100% { transform: rotateZ(360deg); translate3d(0,11px,0); }\n    }\n    @keyframes unknown-on {\n    \t0%   { transform: translate3d(50%, 11px, 0); fill: {{unknownColor}}; }\n    \t100% { transform: translate3d(90%, 11px, 0); fill: {{onColor}};      }\n    }\n    @keyframes unknown-off {\n    \t0%   { transform: translate3d(50%, 11px, 0); fill: {{unknownColor}}; }\n    \t100% { transform: translate3d(10%, 11px, 0); fill: {{offColor}};     }\n    }\n    @keyframes on-off {\n    \t0%   { transform: translate3d(90%, 11px, 0); fill: {{onColor}};   }\n    \t100% { transform: translate3d(10%, 11px, 00); fill: {{offColor}}; }\n    }\n    @keyframes off-on {\n    \t0%   { transform: translate3d(10%, 11px, 0); fill: {{offColor}}; }\n    \t100% { transform: translate3d(90%, 11px, 0); fill: {{onColor}};  }\n    }\n    @keyframes on-waiting {\n    \t0%   { transform: translate3d(90%, 11px, 0); fill: {{onColor}};      }\n    \t100% { transform: translate3d(50%, 11px, 0); fill: {{unknownColor}}; }\n    }\n    @keyframes off-waiting {\n    \t0%   { transform: translate3d(10%, 11px, 0); fill: {{offColor}};     }\n    \t100% { transform: translate3d(50%, 11px, 0); fill: {{unknownColor}}; }\n    }\n    @keyframes waiting-off {\n    \t0%   { transform: translate3d(50%, 11px, 0); fill: {{unknownColor}}; }\n    \t100% { transform: translate3d(10%, 11px, 0); fill: {{offColor}};     }\n    }\n    @keyframes waiting-on {\n    \t0%   { transform: translate3d(50%, 11px, 0); fill: {{unknownColor}}; }\n    \t100% { transform: translate3d(90%, 11px, 0); fill: {{onColor}};      }\n    }\n</style>\n\n<svg class=\"rotary-container {{deviceState}}\" width=\"140px\" height=\"90px\" viewBox=\"0 0 140 90\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g id=\"slider-switch\">\n        <rect id=\"bg\" fill=\"#D1D4D8\" x=\"0\" y=\"0\" width=\"140\" height=\"90\"></rect>\n        <rect id=\"house\" fill=\"#E9F1F4\" x=\"20\" y=\"21\" width=\"100\" height=\"40\" rx=\"20\"></rect>\n        <g id=\"circle-interstitial\" class=\"movable\" transform=\"translate(40.000000, 11.000000)\">\n            <circle id=\"circle\" cx=\"30\" cy=\"30\" r=\"30\"></circle>\n            <path id=\"interstitial\" d=\"M28,2.99810135 C28,1.89458045 28.8877296,1 30,1 C31.1045695,1 32,1.88670635 32,2.99810135 L32,7.00189865 C32,8.10541955 31.1122704,9 30,9 C28.8954305,9 28,8.11329365 28,7.00189865 L28,2.99810135 Z M41.7688985,5.61566982 C42.320659,4.65999268 43.5367456,4.32912811 44.5,4.88526329 C45.4565852,5.43754804 45.7886976,6.65317352 45.2330001,7.61566982 L43.2311015,11.08306 C42.679341,12.0387371 41.4632544,12.3696017 40.5,11.8134665 C39.5434148,11.2611818 39.2113024,10.0455563 39.7669999,9.08305999 L41.7688985,5.61566982 Z M52.3843302,14.7669999 C53.3400073,14.2152394 54.5586015,14.5367456 55.1147367,15.5 C55.6670215,16.4565852 55.3468265,17.675404 54.3843302,18.2311015 L50.91694,20.2330001 C49.9612629,20.7847606 48.7426687,20.4632544 48.1865335,19.5 C47.6342487,18.5434148 47.9544437,17.324596 48.91694,16.7688985 L52.3843302,14.7669999 Z M57.0018986,28 C58.1054196,28 59,28.8877296 59,30 C59,31.1045695 58.1132936,32 57.0018986,32 L52.9981014,32 C51.8945804,32 51,31.1122704 51,30 C51,28.8954305 51.8867064,28 52.9981014,28 L57.0018986,28 Z M54.3843302,41.7688985 C55.3400073,42.320659 55.6708719,43.5367456 55.1147367,44.5 C54.562452,45.4565852 53.3468265,45.7886976 52.3843302,45.2330001 L48.91694,43.2311015 C47.9612629,42.679341 47.6303983,41.4632544 48.1865335,40.5 C48.7388182,39.5434148 49.9544437,39.2113024 50.91694,39.7669999 L54.3843302,41.7688985 Z M45.2330001,52.3843302 C45.7847606,53.3400073 45.4632544,54.5586015 44.5,55.1147367 C43.5434148,55.6670215 42.324596,55.3468265 41.7688985,54.3843302 L39.7669999,50.91694 C39.2152394,49.9612629 39.5367456,48.7426687 40.5,48.1865335 C41.4565852,47.6342487 42.675404,47.9544437 43.2311015,48.91694 L45.2330001,52.3843302 Z M32,57.0018986 C32,58.1054196 31.1122704,59 30,59 C28.8954305,59 28,58.1132936 28,57.0018986 L28,52.9981014 C28,51.8945804 28.8877296,51 30,51 C31.1045695,51 32,51.8867064 32,52.9981014 L32,57.0018986 Z M18.2311015,54.3843302 C17.679341,55.3400073 16.4632544,55.6708719 15.5,55.1147367 C14.5434148,54.562452 14.2113024,53.3468265 14.7669999,52.3843302 L16.7688985,48.91694 C17.320659,47.9612629 18.5367456,47.6303983 19.5,48.1865335 C20.4565852,48.7388182 20.7886976,49.9544437 20.2330001,50.91694 L18.2311015,54.3843302 Z M7.61566982,45.2330001 C6.65999268,45.7847606 5.44139847,45.4632544 4.88526329,44.5 C4.33297854,43.5434148 4.65317352,42.324596 5.61566982,41.7688985 L9.08305999,39.7669999 C10.0387371,39.2152394 11.2573313,39.5367456 11.8134665,40.5 C12.3657513,41.4565852 12.0455563,42.675404 11.08306,43.2311015 L7.61566982,45.2330001 Z M2.99810135,32 C1.89458045,32 1,31.1122704 1,30 C1,28.8954305 1.88670635,28 2.99810135,28 L7.00189865,28 C8.10541955,28 9,28.8877296 9,30 C9,31.1045695 8.11329365,32 7.00189865,32 L2.99810135,32 Z M5.61566982,18.2311015 C4.65999268,17.679341 4.32912811,16.4632544 4.88526329,15.5 C5.43754804,14.5434148 6.65317352,14.2113024 7.61566982,14.7669999 L11.08306,16.7688985 C12.0387371,17.320659 12.3696017,18.5367456 11.8134665,19.5 C11.2611818,20.4565852 10.0455563,20.7886976 9.08305999,20.2330001 L5.61566982,18.2311015 Z M14.7669999,7.61566982 C14.2152394,6.65999268 14.5367456,5.44139847 15.5,4.88526329 C16.4565852,4.33297854 17.675404,4.65317352 18.2311015,5.61566982 L20.2330001,9.08305999 C20.7847606,10.0387371 20.4632544,11.2573313 19.5,11.8134665 C18.5434148,12.3657513 17.324596,12.0455563 16.7688985,11.08306 L14.7669999,7.61566982 Z\"></path>\n        </g>\n        <text id=\"rotary\" font-size=\"10\" font-weight=\"260\" fill=\"#727272\">\n            <tspan x=\"7\" y=\"84\">{{legend}}</tspan>\n        </text>\n        <text id=\"on\" font-size=\"10\" font-weight=\"260\" text-anchor=\"end\" fill=\"#727272\">\n            <tspan x=\"133\" y=\"84\">{{curVal}}</tspan>\n        </text>\n    </g>\n</svg>",
        "js": "Template[name].onCreated(function() {\n    //This tracks the state of the widget\n    this.previousStateVar = new ReactiveVar(\"unknown\")\n    this.currentStateVar = new ReactiveVar(\"unknown\");\n    this.unknownColor = new ReactiveVar(\"gray\");\n    this.onColor = new ReactiveVar(\"#5fcf80\");\n    this.offColor = new ReactiveVar(\"#A6ABB2\");\n});\n\nTemplate[name].onRendered(function(){\n    //This requests an initial state from the device\n    var instance = this;\n    instance.data.pubfeed = instance.data.pubfeed || \"dummyfeed\";\n\n    // Setup starter colors\n    if ( instance.data.unknownColor ) {\n        instance.unknownColor.set(instance.data.unknownColor)\n    }\n    if ( instance.data.onColor ) {\n        instance.onColor.set(instance.data.onColor)\n    }\n    if ( instance.data.offColor ) {\n        instance.offColor.set(instance.data.offColor)\n    }\n     //This hooks the state of the widget to the subscribe feed\n    instance.autorun(function(c) {\n        sf = instance.data.subfeed || \"StateSub\"\n        msg = getFeed(sf,  \"unknown\");\n        Tracker.nonreactive(function(){\n            var curr = instance.currentStateVar.get();\n            if(msg != curr ) {\n                instance.previousStateVar.set( curr );\n                instance.currentStateVar.set( msg );\n            }\n        })\n    });\n    //Send initial request for status\n    publishFeed(this.data.pubfeed, \"reqStatus\");\n});\n\nTemplate[name].helpers({\n    deviceState: function() {\n        // Returns the CSS class based on the state\n        previousStateVar = Template.instance().previousStateVar;\n        currentStateVar = Template.instance().currentStateVar;\n        var current = currentStateVar.get();\n        var old = previousStateVar.get();\n        return old+\"-\"+current\n    },\n    fromX: function() {\n        previousStateVar = Template.instance().previousStateVar;\n        currentStateVar = Template.instance().currentStateVar;\n        var previousStatus = previousStateVar.get();\n        var currentStatus = currentStateVar.get();\n        return Template.instance().stateTable[previousStatus][currentStatus][0].toString()\n    },\n    toX: function() {\n        prevousStateVar = Template.instance().previousStateVar;\n        currentStateVar = Template.instance().currentStateVar;\n        var previousStatus = previousStateVar.get();\n        var currentStatus = currentStateVar.get();\n        return Template.instance().stateTable[previousStatus][currentStatus][1].toString();\n    },\n    legend: function(){\n        legend =  Template.instance().data.legend;\n        return legend || \"TITLE\"\n    },\n    curVal: function() {\n        return currentStateVar.get().toUpperCase();\n    },\n    onColor: function() {\n        return Template.instance().onColor.get();\n    },\n    offColor: function() {\n        return Template.instance().offColor.get();\n    },\n    unknownColor: function() {\n        return Template.instance().unknownColor.get();\n    }\n});\n\nTemplate[name].events({\n    'click svg': function(ev, instance){\n        publishFeed(instance.data.pubfeed, \"toggleState\");\n        var curr = instance.currentStateVar.get();\n        // Don't send on on double clicks\n        console.log(\"the event\", ev)\n        if ( curr != 'waiting' ) {\n            instance.previousStateVar.set(instance.currentStateVar.get())\n            instance.currentStateVar.set('waiting');\n        } \n        return false;\n    },\n});",
        "isWidget": true
    }
}